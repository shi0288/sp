group = 'com.xyauto'
version = '0.0.1'

buildscript {
    ext.kotlin_version = '1.1.4-3'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springVersion}")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
    }
}




apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-noarg'
apply plugin: 'kotlin-allopen'


noArg {
    annotation("com.xyauto.qa.util.annotation.PoKo")
}

allOpen {
    annotation("com.xyauto.qa.util.annotation.PoKo")
}

sourceCompatibility = 1.8


repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "http://tech.qcdqoa.com:8081/nexus/content/repositories/thirdparty/" }
    maven { url "http://repo.maven.apache.org/maven2" }
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Edgware.RELEASE'
    }
}


dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web')
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
        exclude(module: 'commons-logging')
    }
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.24'
    compile group: 'com.liferay', name: 'com.sun.syndication', version: '1.0.LIFERAY-PATCHED-1'
    compile group: 'org.jdom', name: 'jdom', version: '1.1.3'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-eureka'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-feign'
    compile group: 'io.github.openfeign.form', name: 'feign-form', version: '2.1.0'
    compile group: 'io.github.openfeign.form', name: 'feign-form-spring', version: '2.1.0'
    compile group: 'com.mcp', name: 'validate', version: '1.0'
    compile group: 'com.mcp', name: 'fast-cloud', version: '1.6'
    compile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2') {
        exclude(module: 'commons-logging')
    }
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.40'
    compile group: 'com.zaxxer', name: 'HikariCP', version: '2.4.7'
    compile group: 'tk.mybatis', name: 'mapper-spring-boot-starter', version: '1.2.1'
    compile group: 'com.github.pagehelper', name: 'pagehelper-spring-boot-starter', version: '1.2.3'

    compile group: 'org.springframework.cloud', name: 'spring-cloud-sleuth-stream'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-sleuth'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-stream-binder-rabbit'

    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-config'
    compile group: 'org.springframework.cloud', name: 'spring-cloud-config-client'

    compile group: 'com.surftools', name: 'BeanstalkClient', version: '1.4.6'

    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.1'

    compile 'org.springframework.kafka:spring-kafka:1.1.1.RELEASE'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}


project.libsDirName = 'artifacts/'

ext {
    tempEnv = "spring.profiles.active=test"
    tempContent = ""
    propertiesFile = "src/main/resources/bootstrap.properties"
}

task changeEnvironment {
    doLast {
        if (project.hasProperty('env')) {
            def curEnv = "spring.profiles.active=" + env
            File file = new File(propertiesFile)
            tempContent = file.text
            def list = file.readLines()
            for (int i = 0; i < list.size(); i++) {
                String line=list.get(i)
                if (line.indexOf("spring.profiles.active=") > -1) {
                    tempEnv = line
                    break
                }
            }
            String curContent = tempContent.replaceAll(tempEnv, curEnv)
            def printWriter = file.newPrintWriter()
            printWriter.write(curContent)
            printWriter.flush()
            printWriter.close()
            println(curEnv)
        }
    }
}

task changeEnvironmentBack {
    doLast {
        if (project.hasProperty('env')) {
            File file = new File(propertiesFile)
            def printWriter = file.newPrintWriter()
            printWriter.write(tempContent)
            printWriter.flush()
            printWriter.close()
            println(tempEnv)
        }
    }
}

classes.dependsOn changeEnvironment

test.dependsOn changeEnvironmentBack